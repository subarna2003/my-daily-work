import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Class representing a course
class Course {
    private String code;
    private String title;
    private String description;
    private int capacity;
    private int enrolled;

    public Course(String code, String title, String description, int capacity) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.enrolled = 0;
    }

    public String getCode() {
        return code;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public int getEnrolled() {
        return enrolled;
    }

    public boolean isFull() {
        return enrolled >= capacity;
    }

    public void enroll() {
        if (!isFull()) {
            enrolled++;
        }
    }

    public void drop() {
        if (enrolled > 0) {
            enrolled--;
        }
    }

    @Override
    public String toString() {
        return String.format("%s: %s\n%s\nCapacity: %d, Enrolled: %d",
                code, title, description, capacity, enrolled);
    }
}

// Class representing a student
class Student {
    private String id;
    private String name;
    private List<Course> registeredCourses;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Course> getRegisteredCourses() {
        return registeredCourses;
    }

    public void registerCourse(Course course) {
        if (!registeredCourses.contains(course)) {
            registeredCourses.add(course);
            course.enroll();
        } else {
            System.out.println("Already registered for this course.");
        }
    }

    public void dropCourse(Course course) {
        if (registeredCourses.contains(course)) {
            registeredCourses.remove(course);
            course.drop();
        } else {
            System.out.println("Not registered for this course.");
        }
    }
}

// Main class to manage the course registration system
public class Main {
    private static List<Course> courses = new ArrayList<>();
    private static List<Student> students = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        // Sample data
        courses.add(new Course("CS101", "Introduction to Computer Science", "Basics of programming and computer science.", 30));
        courses.add(new Course("MATH101", "Calculus I", "Introduction to differential and integral calculus.", 25));
        courses.add(new Course("PHYS101", "Physics I", "Fundamentals of classical mechanics.", 20));

        students.add(new Student("S001", "Alice Johnson"));
        students.add(new Student("S002", "Bob Smith"));

        while (true) {
            System.out.println("\nStudent Course Registration System");
            System.out.println("1. List Courses");
            System.out.println("2. Register for a Course");
            System.out.println("3. Drop a Course");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    listCourses();
                    break;
                case 2:
                    registerForCourse();
                    break;
                case 3:
                    dropCourse();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please choose again.");
            }
        }
    }

    private static void listCourses() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courses) {
            System.out.println(course);
        }
    }

    private static void registerForCourse() {
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        Student student = findStudent(studentId);

        if (student != null) {
            System.out.print("Enter course code to register for: ");
            String courseCode = scanner.nextLine();
            Course course = findCourse(courseCode);

            if (course != null) {
                if (course.isFull()) {
                    System.out.println("Course is full. Cannot register.");
                } else {
                    student.registerCourse(course);
                    System.out.println("Registered successfully.");
                }
            } else {
                System.out.println("Course not found.");
            }
        } else {
            System.out.println("Student not found.");
        }
    }

    private static void dropCourse() {
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        Student student = findStudent(studentId);

        if (student != null) {
            System.out.print("Enter course code to drop: ");
            String courseCode = scanner.nextLine();
            Course course = findCourse(courseCode);

            if (course != null) {
                student.dropCourse(course);
                System.out.println("Course dropped successfully.");
            } else {
                System.out.println("Course not found.");
            }
        } else {
            System.out.println("Student not found.");
        }
    }

    private static Student findStudent(String id) {
        for (Student student : students) {
            if (student.getId().equals(id)) {
                return student;
            }
        }
        return null;
    }

    private static Course findCourse(String code) {
        for (Course course : courses) {
            if (course.getCode().equals(code)) {
                return course;
            }
        }
        return null;
    }
}
